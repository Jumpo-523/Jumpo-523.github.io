{"componentChunkName":"component---src-templates-blog-post-js","path":"/linux-commands/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"effbf663-de0e-52df-bf46-b8101b7316c4","excerpt":"なんの記事なのか？ 仕事していく中で目についたsed, awkの使用例を１個１個理解しながら記録していくメモ記事です。 yamlファイルからenv変数作成shを作成する sedについて sedの仕様 まず、sed…","html":"<h2>なんの記事なのか？</h2>\n<p>仕事していく中で目についたsed, awkの使用例を１個１個理解しながら記録していくメモ記事です。</p>\n<p><a href=\"#case_one\"><strong>yamlファイルからenv変数作成shを作成する</strong></a></p>\n<h2>sedについて</h2>\n<h3>sedの仕様</h3>\n<p>まず、sedはファイルの中身を走査し、パターンに合う文字列を見つけたら、入れ替える処理を行ってくれるコマンドです。</p>\n<p>【使用方法】</p>\n<ul>\n<li><strong><code class=\"language-text\">sed -e &#39;s/{{pattern}}/{{repl}}/g;&#39; file_name</code>と言うコマンドで、file_nameのテキストに<code class=\"language-text\">{{pattern}}</code>があったら<code class=\"language-text\">{{repl}}</code>に入れ替える処理を実行します。</strong></li>\n</ul>\n<p>【ルール】</p>\n<ul>\n<li><code class=\"language-text\">;</code>で区切られた部分が1パターンになります。</li>\n<li>\n<p><code class=\"language-text\">s/</code>と<code class=\"language-text\">/g</code>は始まりと<del>終わり</del>を示す仕様です。（言葉選ぶ）</p>\n<ul>\n<li>(1029修正)<strong>最後の g はすべてのマッチした文字列を置換することを意味する。 g がなくても全行で置換を実行するが、1行に2つ以上マッチした場合は 1つ目しか置換されない。<a href=\"https://hydrocul.github.io/wiki/commands/sed.html\">(link)</a></strong></li>\n<li>gはglobal のgですね。</li>\n</ul>\n</li>\n</ul>\n<h2>awkについて</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AWK はフィルタリングによく使用されるコマンドであるが、同様にしてフィルタリングに使用される grep や cut と決定的に違うところは、AWK 自体が独立した一つのスクリプト言語であるということだ</code></pre></div>\n<p><a href=\"https://shellscript.sunone.me/awk.html\">参照記事</a></p>\n<p>AWK 自体が独立した一つのスクリプト言語であると言う点が、にわかエンジニアの人にとってとっつきづらいところになると思います。</p>\n<p>詳しくは、後日追記していきます。</p>\n<h3>AWKスクリプト組み込み変数</h3>\n<ul>\n<li>NR: 現在読み込んでいる行の行番号</li>\n<li>$N: Nフィールド目の内容が設定されている</li>\n</ul>\n<div id=\"case_one\"></div>\n<h4>利用ケース①：yaml fileをparseして環境変数に入れたい時、</h4>\n<p>では実際に使用例を見てみます。今、</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml[file.yaml]\"><pre class=\"language-yaml[file.yaml]\"><code class=\"language-yaml[file.yaml]\">VAR1: XXXXXXXXXX</code></pre></div>\n<p>と言うyaml fileがあったときに、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">VAR1=&quot;XXXXXXXXXX&quot;</code></pre></div>\n<p>と言う風に変換したいとします。\nこの場合、sedを用いてfileの中身を変換することができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">sed -e &#39;s/:[^:\\/\\/]/=&quot;/g;s/$/&quot;/g;s/ *=/=/g&#39; file.yaml &gt; file.sh</code></pre></div>\n<p>上記の処理を1から見ていきましょう。</p>\n<ul>\n<li>\n<p>上記の例の１個目のパターンは、</p>\n<ul>\n<li><code class=\"language-text\">{{pattern}}</code>が <code class=\"language-text\">:[^:\\/\\/]</code></li>\n<li><code class=\"language-text\">=&quot;</code>が<code class=\"language-text\">{{repl}}</code>に該当します。</li>\n</ul>\n</li>\n</ul>\n<p>ですので、<code class=\"language-text\">:</code>を見つけたら（注：<code class=\"language-text\">[^:\\/\\/]</code>は<code class=\"language-text\">://</code>に関しては無視するよーと言う正規表現の記法です。つまり、urlはそのままurlとして扱い、文字列入れ替えは行わないと言うことです。）<code class=\"language-text\">=”</code>に変えると言うことを意味してます。</p>\n<p>次のパターンにいきましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s/$/&quot;/g</code></pre></div>\n<p>同じように読み解くと、\n<code class=\"language-text\">$</code>、つまり行の終わりを見つけたら、<code class=\"language-text\">&quot;</code>を付け加えよう！と言うことです。</p>\n<p>最後のパターンですが、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s/ *=/=/g</code></pre></div>\n<p>これは、空白文字が<code class=\"language-text\">=</code>の前にあったらその空白を削除する、と言うことを意味しています。</p>\n<p>苦手意識持っていたsedですが、一個一個見ていくと理解できますね。</p>\n<p>そして最後に、awkを用いて、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">VAR1=&quot;XXXXXXXXXX&quot;</code></pre></div>\n<p>と言うsedの出力文字列に対して “export “と言う文字を付け加えてあげて、 <code class=\"language-text\">set_env.sh</code>に新規で書き込んであげることで完成です。</p>\n<p>全体としては下記のようなコマンドになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">sed -e &#39;s/:[^:\\/\\/]/=&quot;/g;s/$/&quot;/g;s/ *=/=/g&#39; ./config/config.yml | awk &#39;{print &quot;export &quot; $0 }&#39; &gt; set_env.sh</code></pre></div>\n<h2>【Reference】</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/5014632/how-can-i-parse-a-yaml-file-from-a-linux-shell-script\">参照link</a></li>\n</ul>","frontmatter":{"title":"","date":null,"description":null}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"effbf663-de0e-52df-bf46-b8101b7316c4","previousPostId":"a4c78521-2d9b-5acf-8967-1a92b9af8c60","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}